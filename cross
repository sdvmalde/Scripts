#! /bin/bash

mountpoint="/media/steven/KINGSTON"
if [ ! -d "$mountpoint" ]; then
    echo "USB flash drive not mounted"
    exit 7
fi

############################################
#
#  Variable declaration
#
############################################

eval wb="$mountpoint/Cross"
eval conf="${wb}/conf/cross.cnf"

############################################
#
#  Function declarations
#
############################################

function conf_get {
    awk -F':' -v ind="$1" '$1 ~ ind{print $2}' $conf
}

function conf_set {
    awk -F':' -v ind="$1" -v var="$2" 'BEGIN{OFS=":"} $1 ~ ind {
        $2 = var
        present=1
    } 
    { print }
    END {
        if (! present)
            print ind,var
    }' $conf > tmp && mv tmp $conf
}

function get_variables {
    season=$(conf_get "current") 
}

function create_season {
    eval season="${wb}/$1"
    [ -d "$season" ] || mkdir "$season"
    conf_set "current" "$1"
}

function init {
    [ -d "$wb" ] || (mkdir "$wb"; echo "Created workbench at $wb") 
    season="$wb/$@"
    [ -d "$season" ] || (mkdir "$season"; echo "Created season $season")
    cd "$season" 
    mkdir superprestige worldcup cocacola continental rainbow classic stats
    cd "$wb"
    [ -d 'conf' ] || mkdir conf
    [ -f "$conf" ] || (touch "$conf"; conf_set "current" "$@"
                       echo "Created conf file $conf")
    exit 0
}

function check_points {
    cd "$wb/conf"
    echo -n > .tmp
    for gametype in 'worldcup' 'superprestige'; do
        for cat in 'points' 'uci'; do
            [ -f "$gametype $cat" ] || echo "$gametype $cat" >> .tmp && sed -i 's/\r//g' "$gametype $cat"
        done
    done
    for gametype in 'rainbow' 'continental' 'cocacola' 'classic'; do
         [ -f "$gametype uci" ] || echo "$gametype $cat" >> .tmp && sed -i 's/\r//g' "$gametype uci"
    done
    if [ -s .tmp ]; then
        echo -e "E: One or more missing files in $wb/conf:\n"
        cat .tmp && rm .tmp
        exit 6
    else
        rm .tmp
    fi
}

function check_valid_season {
    [ -d "$wb/$season" ] || (mkdir "$wb/$season"; init "$season")
    cd "$wb/$season"
    if [ ! -f "riders" ]; then 
        echo >&2 "E: No file present containing the riders for $season"
        echo >&2 "Opening text editor to add riders now!"
        gedit riders
        exit 5
    else
        sed -i 's/\r//g' riders
    fi
}

function check_class {
    [ -d "$@" ] || (echo >&2 "E: $@ is not an existing gametype"; exit 1)
}

function update_time {
    awk -F [\\t:\'\"]+ -v outtime="$wb/$season/stats/cocacola ranking" '
    {
        gsub(/^ */, "", $1)
        gsub(/ *$/, "", $1)    
    }
    FNR == NR {
        time[$1] = 0
        counts[$1] = 0
    }
    FNR != NR {
        if (FNR == 1) {
            count++
            offset = 0
            for (rider in time) {
                time[rider] += $2*60+$3 
            }
            
        } else if ($2 ~ "[0-9]+") {
            offset = ($2 >= 5) ? 5*60 : $2*60+$3 ;
        }
        counts[$1]++
        time[$1] += offset
    }
    END {
        for (rider in counts) {
            time[rider] += (count - counts[rider]) * 60 * 5
        }
        for (i in time) tmpidx[sprintf("%12s", time[i]),i] = i
        n = asorti(tmpidx)
        j = 0
        for (i=1; i<=n; i++) {
                split(tmpidx[i], tmp, SUBSEP)
                indices[++j] = tmp[2]  # tmp[2] is the name
        }
        base = time[indices[1]]
        printf("%s\t%02dh%02d'\''%02d\"\n", indices[1], base/3600, base/60 % 60, base % 60) > outtime
        for (i=2; i<=n; i++) {
            t = time[indices[i]] - base
            printf("%s\t+%dh%02d'\''%02d\"\n", indices[i], t/3600, t/60 % 60, t % 60) >> outtime
        }
    }' ../riders *
}

function update_uci {
    awk -F \\t '
    {
        gsub(/^ */, "", $1)
        gsub(/ *$/, "", $1)    
    }
    NR == FNR {
        uci[$1] = $2
    } NR != FNR && $1 ~ "^[0-9]+$" {
        awarded[++i] = $1
    } NR != FNR && $1 !~ "^[0-9]+$" {
        if (!($1 in uci)) {
            print "#Error: line " FNR >> "../stats/error.log"
            print "file=" FILENAME >> "../stats/error.log"
            print "rider=\""$1"\"" >> "../stats/error.log"
        }
        if (FNR <= i)
            uci[$1] += awarded[FNR]
    }
    END {
        for (rider in uci)
            print rider "\t" uci[rider]
    }
    ' /tmp/cross_uci "${wb}/conf/${@} uci" * > .tmp && mv .tmp /tmp/cross_uci
}

function update_pts {
    awk -F \\t '
    {
        gsub(/^ */, "", $1)
        gsub(/ *$/, "", $1)    
    }
    NR == FNR {
        pts[$1] = $2
    } NR != FNR && $1 ~ "^[0-9]+$" {
        awarded[++i] = $1
    } NR != FNR && $1 !~ "^[0-9]+$" {
        if (FNR <= i)
            pts[$1] += awarded[FNR]
    }
    END {
        for (rider in pts)
            print rider "\t" pts[rider]
    }
    ' /tmp/cross_points "${wb}/conf/${@} points" * | sort -nr -t$'\t' -k2 > "../stats/${@} points"
}

function update_palmares {
    awk -F \\t '
    {
        gsub(/^ */, "", $1)
        gsub(/ *$/, "", $1)    
    }
    NR == FNR {
        first[$1] = $2
        second[$1] = $3
        third[$1] = $4
    } NR != FNR {
        switch (FNR) {
        case 1:
            first[$1]++
            break
        case 2:
            second[$1]++
            break
        case 3:
            third[$1]++
            break
        default:
            getfile
        }
    }
    END {
        for (rider in first)
            print rider "\t" first[rider] "\t" second[rider] "\t" third[rider]
    }' /tmp/cross_palm * > /tmp/cross_palm_tmp && mv /tmp/cross_palm_tmp /tmp/cross_palm
}

function auto_replace {
    cd ../stats
    echo "break" >> error.log
    exec 3<error.log
    while true; do
        read -u 3 line; eval "$line"
        read -u 3 line; eval "$line"
        read -u 3 line; eval "$line"
        find .. -name "$file"
        RIDER=$(agrep 2>/dev/null -B "$rider" ../riders <<< "y" | cut -f2 -d')')
        echo "Error: $rider, did you mean $RIDER?"
        read -u 1 ans
        [[ $ans =~ [Yy].* ]] && find .. -name "$file" -exec sed -i "s/$rider/$RIDER/" "{}" \;
    done < error.log
}

function update_all {
    cd "$wb/$season"
    cd cocacola
    update_time
    echo -n > ../stats/error.log
    
    sed 's/$/\t0/' ../riders > /tmp/cross_points
    for type in "superprestige" "worldcup"; do
        cd ../"$type"
        [ "$(ls -A .)" ] && update_pts "$type"
    done
    sed 's/$/\t0/' ../riders > /tmp/cross_uci
    sed 's/$/\t0\t0\t0/' ../riders > /tmp/cross_palm
    for type in "superprestige" "worldcup" "classic" "continental" "rainbow" "cocacola"; do
        cd ../"$type"
        [ "$(ls -A .)" ] && (update_uci "$type"; update_palmares "$type")
    done
    sort /tmp/cross_uci -k2 -t$'\t' -nr > ../stats/uci
    sort /tmp/cross_palm -k2,2 -k3,3 -k4,4 -t$'\t' -nr > ../stats/palmares
    rm /tmp/cross*
    if [[ $(wc -l < ../stats/error.log) -gt 0 ]]; then
        echo >&2 "E: invalid rider names"
        cat ../stats/error.log
        echo "Enter auto replace mode?"
        read line
        [[ $line =~ [Yy].* ]] && auto_replace
        exit 8
    fi
}

function next_season {
    echo "Next season? [Y/n] "
    read line
    if [[ $line =~ [Yy].* ]]; then
        seas=$(tail -c3 <<< "$season")
        ((seas++))
        [[ $seas -gt 9 ]] || seas="0$seas"
        conf_set 'current' "season$seas"
        echo "Season updated to season$seas"
        init "season$seas"
        exit 0
    else
        echo 'Abort changing season'
        exit 6
    fi
}


############################################
#
#  End function list
#
############################################


[ -d "$wb" ] || init 'season01'
season=$(conf_get 'current')
cd "$wb/$season"
check_points
check_valid_season

getopts "n" opt
case $opt in
 n)
   next_season
esac

# update races
update_all
